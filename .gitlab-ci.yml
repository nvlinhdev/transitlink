variables:
  DOCKER_IMAGE: registry.gitlab.com/sep490_g80/transit-link-backend
  USER: transitlink
  PROJECT_DIR: "/srv/transitlink"
  BACKUPS_DIR: "/backups"
  GRADLE_VERSION: "8.14.3-jdk21-alpine"
  DOCKER_VERSION: "28.3.3"
  ALPINE_VERSION: "3.22.1"
  CURL_VERSION: "8.15.0"
  APP_DB_CONTAINER: "transitlink-db"
  APP_DB_NAME: "transitlink"
  APP_CONTAINER: "transitlink"
  KEYCLOAK_DB_CONTAINER: "keycloak-db"
  KEYCLOAK_DB_NAME: "keycloak"
  KEYCLOAK_CONTAINER: "keycloak"
  POSTGRES_IMAGE: bitnami/postgresql:17.5.0-debian-12-r20
  KEYCLOAK_IMAGE: bitnami/keycloak:26.3.1-debian-12-r2
  REDIS_IMAGE: bitnami/redis:8.0.3-debian-12-r2

# Common rules and configurations
.rules_changes: &changes
  changes:
    - "**/*.java"
    - "build.gradle.kts"
    - "gradle.properties.kts"
    - "src/**/*"

.ssh_commands: &ssh_commands
  - apk add --no-cache openssh
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
  - chmod 600 ~/.ssh/id_rsa
  - ssh-keyscan -H $HOST >> ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts

.ssh_setup: &ssh_setup
  before_script:
    - *ssh_commands

.common_rules: &common_rules
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_COMMIT_BRANCH =~ /^(feat|fix|hotfix)\/.+/'
      <<: *changes
      when: always
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "dev"'
      <<: *changes
      when: always
    - when: never

.test_artifacts: &test_artifacts
  artifacts:
    when: always
    expire_in: 1 week
    reports:
      junit:
        - build/test-results/*/TEST-*.xml

.docker_config: &docker_config
  services:
    - name: docker:${DOCKER_VERSION}-dind
      alias: docker
      command: ["--tls=false"]
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
    DOCKER_DRIVER: overlay2

.backup_rules: &backup_rules
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "main"'
      <<: *changes
      when: on_success
    - when: never

.backup_config: &backup_config
  stage: backup
  image: alpine:${ALPINE_VERSION}
  <<: *backup_rules
  needs:
    - job: build-and-push-image
      artifacts: false
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
  <<: *ssh_setup

stages:
  - test
  - merge
  - docker-publish
  - backup
  - deploy
  - cleanup

unit-tests:
  stage: test
  image: gradle:${GRADLE_VERSION}
  <<: *common_rules
  script:
    - gradle clean unitTest --no-daemon --stacktrace --info
  <<: *test_artifacts
  artifacts:
    paths:
      - build/jacoco/unitTest.exec
      - build/test-results/unitTest/
      - build/reports/tests/unitTest

integration-tests:
  stage: test
  image: gradle:${GRADLE_VERSION}
  <<: *docker_config
  variables:
    TESTCONTAINERS_HOST_OVERRIDE: docker
    TESTCONTAINERS_RYUK_DISABLED: "true"
    TESTCONTAINERS_CHECKS_DISABLE: "true"
    GRADLE_OPTS: "-Xmx2g -Dorg.gradle.daemon=false"
  <<: *common_rules
  before_script:
    - chmod +x scripts/integration-test-setup.sh
    - ./scripts/integration-test-setup.sh
  script:
    - gradle integrationTest --no-daemon --stacktrace --info
  after_script:
    - chmod +x scripts/docker-cleanup.sh
    - ./scripts/docker-cleanup.sh
  <<: *test_artifacts
  artifacts:
    paths:
      - build/jacoco/integrationTest.exec
      - build/test-results/integrationTest/
      - build/reports/tests/integrationTest/
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

generate_report:
  stage: test
  image: gradle:${GRADLE_VERSION}
  needs:
    - job: "unit-tests"
      artifacts: true
    - job: "integration-tests"
      artifacts: true
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_COMMIT_BRANCH =~ /^(feat|fix|hotfix)\/.+/'
      <<: *changes
      when: on_success
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "dev"'
      <<: *changes
      when: on_success
    - when: never
  script:
    - gradle jacocoCombinedTestReport --no-daemon --stacktrace --info
  artifacts:
    when: always
    paths:
      - build/reports/jacoco/combined
      - build/reports/jacoco/jacocoCombinedTestReport
    expire_in: 1 week

push-report:
  stage: test
  image: gradle:${GRADLE_VERSION}
  needs:
    - job: "generate_report"
      artifacts: true
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "dev"'
      <<: *changes
      when: on_success
    - when: never
  before_script:
    - echo "$SONAR_TOKEN"
  script:
    - gradle sonar

create_merge_dev:
  stage: merge
  image: curlimages/curl:$CURL_VERSION
  needs:
    - job: "unit-tests"
    - job: "integration-tests"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_COMMIT_BRANCH =~ /^(feat|fix)\/.+/'
      <<: *changes
      when: on_success
    - when: never
  before_script:
    - apk add --no-cache jq
    - chmod +x scripts/create-merge-request.sh
  script:
    - ./scripts/create-merge-request.sh "dev"
  artifacts:
    reports:
      dotenv: merge_request_dev.env
    expire_in: 1 hour

create_merge_main:
  stage: merge
  image: curlimages/curl:$CURL_VERSION
  needs:
    - job: "unit-tests"
    - job: "integration-tests"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_COMMIT_BRANCH =~ /^hotfix\/.+/'
      <<: *changes
      when: on_success
    - when: never
  before_script:
    - apk add --no-cache jq
    - chmod +x scripts/create-merge-request.sh
  script:
    - ./scripts/create-merge-request.sh "main"
  artifacts:
    reports:
      dotenv: merge_request_main.env
    expire_in: 1 hour

approve_merge_request:
  stage: merge
  image: curlimages/curl:$CURL_VERSION
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_COMMIT_BRANCH =~ /^(feat|fix|hotfix)\/.+/'
      <<: *changes
      when: manual
      allow_failure: false
    - when: never
  needs:
    - job: "create_merge_dev"
      artifacts: true
      optional: true
    - job: "create_merge_main"
      artifacts: true
      optional: true
  before_script:
    - apk add --no-cache jq
    - chmod +x scripts/approve-merge-request.sh
  script:
    - ./scripts/approve-merge-request.sh

build-and-push-image:
  stage: docker-publish
  image: docker:${DOCKER_VERSION}
  <<: *docker_config
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "dev"'
      <<: *changes
      when: on_success
    - when: never
  needs:
    - job: "unit-tests"
      artifacts: false
    - job: "integration-tests"
      artifacts: false
  before_script:
    - chmod +x scripts/build-and-push-image.sh
  script:
    - ./scripts/build-and-push-image.sh

backup_app_db:
  <<: *backup_config
  before_script:
    - *ssh_commands
    - chmod +x scripts/backup-database.sh
  script:
    - ./scripts/backup-database.sh "$APP_DB_CONTAINER" "$APP_DB_NAME" "$APP_DB_USER" "$APP_DB_PASS"

backup_keycloak_db:
  <<: *backup_config
  before_script:
    - *ssh_commands
    - chmod +x scripts/backup-database.sh
  script:
    - ./scripts/backup-database.sh "$KEYCLOAK_DB_CONTAINER" "$KEYCLOAK_DB_NAME" "$KEYCLOAK_DB_USER" "$KEYCLOAK_DB_PASS"

backup_transitlink_data:
  <<: *backup_config
  before_script:
    - *ssh_commands
    - chmod +x scripts/backup-transitlink-data.sh
  script:
    - ./scripts/backup-transitlink-data.sh

deploy:
  stage: deploy
  image: alpine:${ALPINE_VERSION}
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "main"'
      <<: *changes
      when: on_success
    - when: never
  needs:
    - job: backup_app_db
      artifacts: false
    - job: backup_keycloak_db
      artifacts: false
    - job: backup_transitlink_data
      artifacts: false
  before_script:
    - *ssh_commands
    - chmod +x scripts/deploy.sh
  script:
    - ./scripts/deploy.sh

rollback:
  stage: deploy
  image: alpine:${ALPINE_VERSION}
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "main"'
      <<: *changes
      when: manual
    - when: never
  variables:
    ROLLBACK_TAG: ""
  before_script:
    - *ssh_commands
    - chmod +x scripts/rollback.sh
  script:
    - ./scripts/rollback.sh "$ROLLBACK_TAG"

cleanup_backups:
  stage: cleanup
  image: alpine:${ALPINE_VERSION}
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: always
    - when: never
  before_script:
    - *ssh_commands
    - chmod +x scripts/cleanup-backups.sh
  script:
    - ./scripts/cleanup-backups.sh