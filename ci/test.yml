unit-tests:
  stage: test
  <<: *gradle_template
  <<: *rules_feature_fix
  script:
    - gradle clean unitTest --no-daemon --stacktrace --info
  artifacts:
    <<: *test_artifacts
    paths:
      - build/jacoco/unitTest.exec
      - build/test-results/unitTest/
      - build/reports/tests/unitTest

integration-tests:
  stage: test
  <<: *gradle_template
  <<: *docker_integration_setup
  <<: *rules_feature_fix
  <<: *retry_config
  before_script:
    - chmod +x scripts/test/integration-setup.sh
    - ./scripts/test/integration-setup.sh
  script:
    - gradle integrationTest --no-daemon --stacktrace --info
  artifacts:
    <<: *test_artifacts
    paths:
      - build/jacoco/integrationTest.exec
      - build/test-results/integrationTest/
      - build/reports/tests/integrationTest/

generate_report:
  stage: test
  <<: *gradle_template
  needs:
    - job: "unit-tests"
      artifacts: true
    - job: "integration-tests"
      artifacts: true
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_COMMIT_BRANCH =~ /^(feat|fix|hotfix)\/.+/'
      <<: *changes
      when: on_success
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "dev"'
      <<: *changes
      when: on_success
    - when: never
  script:
    - gradle jacocoCombinedTestReport --no-daemon --stacktrace --info
  artifacts:
    when: always
    paths:
      - build/reports/jacoco/combined
      - build/reports/jacoco/jacocoCombinedTestReport
    expire_in: 1 week

push-report:
  stage: test
  <<: *gradle_template
  needs:
    - job: "generate_report"
      artifacts: true
  <<: *rules_dev_only
  before_script:
    - echo "$SONAR_TOKEN"
  script:
    - gradle sonar